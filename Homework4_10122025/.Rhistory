library(readxl)
heartdata <- read_excel("~/Documents/MBA Program Documents/Summer 2024/Data Analysis and Decision Making/Project/Heart Disease Data.xls")
View(heartdata)
library(ggplot2)
library(dplyr)
#install.packages('caret')
library(caret)  # For cross-validation
library(car)    # For VIF and other diagnostic tools
library(GGally) # For scatterplot matrix
# Load the dataset
#heartdata <- read.csv("/Users/Khushi/Documents/Data Analysis/Heart Disease Data.csv")
# Check the structure and summary statistics of the dataset
str(heartdata)
summary(heartdata)
# If there were missing values, we would remove rows with heartdata <- na.omit(heartdata). However, this dataset does not contain missing values.
# Visualize Heart Disease Status
ggplot(data = heartdata) +
geom_bar(aes(x = HeartDisease, fill = HeartDisease)) +
labs(title = "Heart Disease Status", x = "Heart Disease", y = "Count")
# Scatterplot Matrix with Color by Heart Disease
selected_data <- data.frame(
PhysicalHealth = heartdata$PhysicalHealth,
MentalHealth = heartdata$MentalHealth,
Sex = as.factor(heartdata$Sex),
SleepTime = heartdata$SleepTime,
Asthma = as.factor(heartdata$Asthma),
Diabetic = as.factor(heartdata$Diabetic),
Smoking = as.factor(heartdata$Smoking),
HeartDisease = as.factor(heartdata$HeartDisease)
)
selected_data_clean <- na.omit(selected_data)
ggpairs(selected_data_clean,
aes(color = HeartDisease),
columns = 1:7,  # Select relevant columns
title = "Scatterplot Matrix of Health Variables Colored by Heart Disease")
# Convert HeartDisease to a binary factor (if not already)
selected_data_clean$HeartDisease <- factor(selected_data_clean$HeartDisease, levels = c("No", "Yes"))
# Check the structure to ensure it's correctly formatted
str(selected_data_clean$HeartDisease)
logistic_model <- glm(HeartDisease ~ PhysicalHealth * MentalHealth + Sex + SleepTime + Asthma + Smoking + Diabetic,
data = selected_data_clean,
family = binomial)
# Summary of the model
summary(logistic_model)$DevianceResiduals
# Check for multicollinearity using VIF
vif(logistic_model)
# Full model with interaction effects
full_model <- glm(HeartDisease ~ PhysicalHealth * MentalHealth +
Sex + SleepTime + Asthma + Smoking +
Diabetic,
data = selected_data_clean,
family = binomial(link = "logit"))
reduced_model <- glm(HeartDisease ~ PhysicalHealth + MentalHealth +
Sex + SleepTime + Asthma + Smoking +
Diabetic,
data = selected_data_clean,
family = binomial(link = "logit"))
anova_result <- anova(reduced_model, full_model, test = "Chisq")
print(anova_result)
# Cross-Validation
set.seed(123)
train_control <- trainControl(method = "cv", number = 10)  # 10-fold cross-validation
# Train the logistic regression model using cross-validation
cv_model <- train(HeartDisease ~ PhysicalHealth * MentalHealth +
Sex + SleepTime + Asthma + Smoking +
Diabetic,
data = selected_data_clean,
method = "glm",
family = binomial,
trControl = train_control)
# Print cross-validation results
cv_model
# Residual Diagnostics
full_model.step <- step(full_model)
# Set up the plotting area to have 2x2 plots
par(mfrow = c(2, 2))
plot(full_model.step)
par(mfrow = c(1, 1))
# Convert the model to a data frame for plotting
mod <- fortify(full_model.step)
# Residuals vs Fitted values plot
ggplot(mod) +
aes(.fitted, .resid) +
geom_point() +
geom_hline(yintercept = 0) +
geom_smooth(se = FALSE) +
labs(x = "Fitted values", y = "Residuals", title = "Residuals vs Fitted")
# Square root of absolute standardized residuals vs Fitted values plot
ggplot(mod) +
aes(.fitted, sqrt(abs(.stdresid))) +
geom_point() +
geom_hline(yintercept = 0) +
geom_smooth(se = FALSE) +
labs(x = "Fitted values", y = "Sqrt of |Standardized Residuals|", title = "Scale-Location Plot")
# Plotting standardized residuals vs Fitted values colored by Asthma
ggplot(mod) +
aes(.fitted, .stdresid) +
geom_point(aes(colour = factor(selected_data_clean$Asthma))) +
labs(x = "Fitted values", y = "Standardized Residuals", color = "Asthma", title = "Residuals vs Fitted by Asthma")
# Plotting standardized residuals vs Fitted values colored by Sex
ggplot(mod) +
aes(.fitted, .stdresid) +
geom_point(aes(colour = factor(selected_data_clean$Sex))) +
labs(x = "Fitted values", y = "Standardized Residuals", color = "Sex", title = "Residuals vs Fitted by Sex")
# Plotting standardized residuals vs Fitted values colored by Diabetic
ggplot(mod) +
aes(.fitted, .stdresid) +
geom_point(aes(colour = factor(selected_data_clean$Diabetic))) +
labs(x = "Fitted values", y = "Standardized Residuals", color = "Diabetic", title = "Residuals vs Fitted by Diabetic")
# Plotting standardized residuals vs Fitted values colored by HeartDisease
ggplot(mod) +
aes(.fitted, .stdresid) +
geom_point(aes(colour = factor(selected_data_clean$HeartDisease))) +
labs(x = "Fitted values", y = "Standardized Residuals", color = "Heart Disease", title = "Residuals vs Fitted by Heart Disease")
# Cooks distance plot
influence_plot <- influencePlot(full_model)
# Find observations with maximum and high Cook's Distance
(max_cooksd <- which(mod$.cooksd == max(mod$.cooksd)))
(high_cooksd <- which(mod$.cooksd > 0.03))
# Leverage plot
ggplot(mod) +
aes(seq_along(.hat), .hat) +
geom_col() +
labs(x = "Observation Number", y = "Leverage", title = "Leverage Plot")
# Find observations with maximum leverage
max_hat <- which(mod$.hat == max(mod$.hat))
# Plot standardized residuals vs HeartDisease
ggplot(mod) +
aes(x = selected_data_clean$HeartDisease, y = .stdresid) +
geom_point() +
geom_hline(yintercept = 0) +
geom_smooth(se = FALSE) +
labs(x = "Heart Disease", y = "Standardized Residuals", title = "Standardized Residuals vs Heart Disease")
# Q-Q plot for residuals
qqnorm(residuals)
# Residual Diagnostics
full_model.step <- step(full_model)
# Set up the plotting area to have 2x2 plots
par(mfrow = c(2, 2))
plot(full_model.step)
par(mfrow = c(1, 1))
# Convert the model to a data frame for plotting
mod <- fortify(full_model.step)
# Residuals vs Fitted values plot
ggplot(mod) +
aes(.fitted, .resid) +
geom_point() +
geom_hline(yintercept = 0) +
geom_smooth(se = FALSE) +
labs(x = "Fitted values", y = "Residuals", title = "Residuals vs Fitted")
# Square root of absolute standardized residuals vs Fitted values plot
ggplot(mod) +
aes(.fitted, sqrt(abs(.stdresid))) +
geom_point() +
geom_hline(yintercept = 0) +
geom_smooth(se = FALSE) +
labs(x = "Fitted values", y = "Sqrt of |Standardized Residuals|", title = "Scale-Location Plot")
# Plotting standardized residuals vs Fitted values colored by Asthma
ggplot(mod) +
aes(.fitted, .stdresid) +
geom_point(aes(colour = factor(selected_data_clean$Asthma))) +
labs(x = "Fitted values", y = "Standardized Residuals", color = "Asthma", title = "Residuals vs Fitted by Asthma")
# Plotting standardized residuals vs Fitted values colored by Sex
ggplot(mod) +
aes(.fitted, .stdresid) +
geom_point(aes(colour = factor(selected_data_clean$Sex))) +
labs(x = "Fitted values", y = "Standardized Residuals", color = "Sex", title = "Residuals vs Fitted by Sex")
# Plotting standardized residuals vs Fitted values colored by Diabetic
ggplot(mod) +
aes(.fitted, .stdresid) +
geom_point(aes(colour = factor(selected_data_clean$Diabetic))) +
labs(x = "Fitted values", y = "Standardized Residuals", color = "Diabetic", title = "Residuals vs Fitted by Diabetic")
# Plotting standardized residuals vs Fitted values colored by HeartDisease
ggplot(mod) +
aes(.fitted, .stdresid) +
geom_point(aes(colour = factor(selected_data_clean$HeartDisease))) +
labs(x = "Fitted values", y = "Standardized Residuals", color = "Heart Disease", title = "Residuals vs Fitted by Heart Disease")
# Cooks distance plot
influence_plot <- influencePlot(full_model)
# Find observations with maximum and high Cook's Distance
(max_cooksd <- which(mod$.cooksd == max(mod$.cooksd)))
(high_cooksd <- which(mod$.cooksd > 0.03))
# Leverage plot
ggplot(mod) +
aes(seq_along(.hat), .hat) +
geom_col() +
labs(x = "Observation Number", y = "Leverage", title = "Leverage Plot")
# Find observations with maximum leverage
max_hat <- which(mod$.hat == max(mod$.hat))
# Plot standardized residuals vs HeartDisease
ggplot(mod) +
aes(x = selected_data_clean$HeartDisease, y = .stdresid) +
geom_point() +
geom_hline(yintercept = 0) +
geom_smooth(se = FALSE) +
labs(x = "Heart Disease", y = "Standardized Residuals", title = "Standardized Residuals vs Heart Disease")
# Q-Q plot for residuals
residuals <- residuals(logistic_model, type = "deviance")
fitted_values <- fitted(logistic_model)
qqnorm(residuals)
qqline(residuals, col = "red")
# Predict probabilities for all observations
selected_data_clean$predicted_probabilities <- predict(logistic_model, type = "response")
selected_data_clean$predicted_probabilities
library(ggplot2)
Plot1_Probability <- ggplot(selected_data_clean, aes(x = predicted_probabilities)) +
geom_histogram(binwidth = 0.05, fill = "blue", color = "black") +
labs(title = "Histogram of Predicted Probabilities",
x = "Predicted Probability",
y = "Frequency") +
theme_minimal()
Plot1_Probability
# Analyze predictors with the highest probabilities
high_prob_cases <- selected_data_clean %>%
filter(predicted_probabilities > 0.6) %>%  # Using 0.6 as a threshold for high probability
arrange(desc(predicted_probabilities))
high_prob_cases
# Summary of high probability cases
summary(high_prob_cases)
# Identify which predictors have the highest probability predictions
most_influential_predictors <- summary(glm(HeartDisease ~ predicted_probabilities,
data = selected_data_clean,
family = binomial))
most_influential_predictors
# Plot residuals against the order of observations
library(lmtest)
ggplot(data = data.frame(order = 1:length(residuals), residuals = residuals), aes(x = order, y = residuals)) +
geom_point() +
geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
labs(x = "Observation Order", y = "Deviance Residuals", title = "Residuals vs. Observation Order") +
theme_minimal()
# Conduct Durbin-Watson test
dw_test <- dwtest(logistic_model)
print(dw_test)
# Load the dataset
#heartdata <- read.csv("/Users/Khushi/Documents/Data Analysis/Heart Disease Data.csv")
# Check the structure and summary statistics of the dataset
str(heartdata)
summary(heartdata)
# If there were missing values, we would remove rows with heartdata <- na.omit(heartdata). However, this dataset does not contain missing values.
library(readxl)
heartdata <- read_excel("~/Documents/MBA Program Documents/Summer 2024/Data Analysis and Decision Making/Project/Heart Disease Data.xls")
View(heartdata)
library(ggplot2)
library(dplyr)
#install.packages('caret')
library(caret)  # For cross-validation
library(car)    # For VIF and other diagnostic tools
library(GGally) # For scatterplot matrix
# Load the dataset
#heartdata <- read.csv("/Users/Khushi/Documents/Data Analysis/Heart Disease Data.csv")
# Check the structure and summary statistics of the dataset
str(heartdata)
summary(heartdata)
# If there were missing values, we would remove rows with heartdata <- na.omit(heartdata). However, this dataset does not contain missing values.
# Visualize Heart Disease Status
ggplot(data = heartdata) +
geom_bar(aes(x = HeartDisease, fill = HeartDisease)) +
labs(title = "Heart Disease Status", x = "Heart Disease", y = "Count")
# Scatterplot Matrix with Color by Heart Disease
selected_data <- data.frame(
PhysicalHealth = heartdata$PhysicalHealth,
MentalHealth = heartdata$MentalHealth,
Sex = as.factor(heartdata$Sex),
SleepTime = heartdata$SleepTime,
Asthma = as.factor(heartdata$Asthma),
Diabetic = as.factor(heartdata$Diabetic),
Smoking = as.factor(heartdata$Smoking),
HeartDisease = as.factor(heartdata$HeartDisease)
)
selected_data_clean <- na.omit(selected_data)
ggpairs(selected_data_clean,
aes(color = HeartDisease),
columns = 1:7,  # Select relevant columns
title = "Scatterplot Matrix of Health Variables Colored by Heart Disease")
# Convert HeartDisease to a binary factor (if not already)
selected_data_clean$HeartDisease <- factor(selected_data_clean$HeartDisease, levels = c("No", "Yes"))
# Check the structure to ensure it's correctly formatted
str(selected_data_clean$HeartDisease)
logistic_model <- glm(HeartDisease ~ PhysicalHealth * MentalHealth + Sex + SleepTime + Asthma + Smoking + Diabetic,
data = selected_data_clean,
family = binomial)
# Summary of the model
summary(logistic_model)$DevianceResiduals
# Check for multicollinearity using VIF
vif(logistic_model)
# Full model with interaction effects
full_model <- glm(HeartDisease ~ PhysicalHealth * MentalHealth +
Sex + SleepTime + Asthma + Smoking +
Diabetic,
data = selected_data_clean,
family = binomial(link = "logit"))
reduced_model <- glm(HeartDisease ~ PhysicalHealth + MentalHealth +
Sex + SleepTime + Asthma + Smoking +
Diabetic,
data = selected_data_clean,
family = binomial(link = "logit"))
anova_result <- anova(reduced_model, full_model, test = "Chisq")
print(anova_result)
# Cross-Validation
set.seed(123)
train_control <- trainControl(method = "cv", number = 10)  # 10-fold cross-validation
# Train the logistic regression model using cross-validation
cv_model <- train(HeartDisease ~ PhysicalHealth * MentalHealth +
Sex + SleepTime + Asthma + Smoking +
Diabetic,
data = selected_data_clean,
method = "glm",
family = binomial,
trControl = train_control)
# Print cross-validation results
cv_model
library(TTR)
library(fpp2)
library(fpp)
attributes(elecequip)
?elecequip
elecequip
attributes(elecequip)
plot(elecequip)
Acf(elecequip)
mean_forecast <- meanf(elecequip,5)
View(mean_forecast)
plot(mean_forecast)
mean(elecequip)
\
naive_forecast <- naive(elecequip,5)
plot(naive_forecast)
View(naive_forecast)
naive_forecast
attributes(naive_forecast)
naive_forecast$fitted
?forecast
rwf_forecast <- rwf(elecequip,5)
rwf_forecast <- rwf(elecequip,5, drift = TRUE)
rwf_forecast <- rwf(elecequip,5)
rwf_forecast <- rwf(elecequip,5, drift = TRUE)
plot(rwf_forecast)
snaive_forecast <- snaive(elecequip,5)
plot(snaive_forecast)
rwf_forecast <- rwf(elecequip,100, drift = TRUE)
plot(rwf_forecast)
snaive_forecast <- snaive(elecequip,100)
plot(snaive_forecast)
MA5_forecast <- ma(elecequip,order=5)
MA9_forecast <- ma(elecequip,order=9)
plot(MA5_forecast)
plot(MA9_forecast)
MA25_forecast <- ma(elecequip,order=25)
plot(MA25_forecast)
plot(elecequip)
lines(naive_forecast$mean,col="red")
lines(rwf_forecast$mean,col="green")
lines(snaive_forecast$mean,col="black")
lines(MA5_forecast,col="Pink")
lines(MA9_forecast,col="Blue")
ets_forecast <- ets(elecequip)
plot(ets_forecast)
ets_forecast2 <- forecast(ets_forecast,h=5)
plot(ets_forecast2)
HW_forecast <- HoltWinters(elecequip)
HW_forecast
plot(HW_forecast)
SSE_Simple <- HoltWinters(elecequip,beta=FALSE,gamma=FALSE)
plot(SSE_Simple)
forecast_HW <- forecast(HW_forecast,h=5)
plot(forecast_HW)
accuracy(forecast_HW)
forecast_SSE <- forecast(SSE_Simple,h=5)
accuracy(forecast_SSE)
?ets
ets_forecast <- ets(elecequip)
ets_forecast
forecast_ets <- forecast(ets_forecast,h=5)
accuracy(forecast_ets())
accuracy(forecast.ets())
accuracy(forecast_ets)
library(readr)
Air_Quality_Health_Data <- read_csv("air_quality_health_monthly.csv")
View(Air_Quality_Health_Data)
View(Air_Quality_Health_Data)
View(Air_Quality_Health_Data)
library(readr)
Air_Quality_Health_Data <- read_csv("air_quality_health_monthly.csv")
View(Air_Quality_Health_Data)
View(Air_Quality_Health_Data)
View(Air_Quality_Health_Data)
MyData <- Air_Quality_Health_Data   # Renames the data file
library(fpp2)
library(TTR)
attributes(MyData)
plot(MyData)
plot(MyData)
Acf(MyData)
